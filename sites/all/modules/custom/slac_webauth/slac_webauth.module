<?php
/**
 * @file
 * Authenticates users through SLAC WebAuth
 *
 */

// define('WEBAUTH_DOMAIN', 'stanford.edu');
define('EMAIL_DOMAIN', 'slac.stanford.edu');

/**
 * Currently we can't test SSL with cookies but will re-implement
 */
function slac_webauth_boot() {
  global $user, $base_path;
  if ($user->uid > 0) {
    // @todo: why expiration is only for 1 hour?
    setcookie("WALogin", 1, REQUEST_TIME + 3600, $base_path);
  }
}

/**
 * Implement hook_init
 */
function slac_webauth_init() {
  global $_webauth_session, $user;

  // Displaying a custom message for 403
  $access_denied_page = variable_get('site_403', '');
  if ($access_denied_page != 'slac_webauth/403') {
    variable_set('site_403', 'slac_webauth/403');
  }

  // Pages for logged in users should not be cached
  if ($user->uid > 0) {
    header("Cache-Control: no-store, no-cache, must-revalidate");
  }

  // End the session and log user out if:
  // the user is logged in as a WebAuth user and:
  // either the user no longer has a webauth_at cookie
  // or the user's token has expired, or is not there
  if ($user->uid > 0) {
    $authmap = db_query("SELECT * FROM {authmap} WHERE uid = :uid and module = :module", array(':uid' => $user->uid, ':module' => 'slac_webauth'))->fetchField();
    if (empty($authmap)) {
      return;
    }
    // @todo: investigate, stanford WMD uses a check php script to go through php env vars
    $server_vars = $_SERVER;
    if (!isset($_COOKIE['webauth_at']) || 
    !isset($server_vars['WEBAUTH_TOKEN_EXPIRATION']) ||
    $server_vars['WEBAUTH_TOKEN_EXPIRATION'] <= REQUEST_TIME) {
      session_destroy();
      session_start();
      $null = NULL;
      user_module_invoke('user/logout', $null, $user);
      $user = drupal_anonymous_user();
    } 
  }
}

/**
 * Implements hook_menu().
 */

function webauth_menu() {
  $items = array();

  // Setup our authentication URL
/*
  $path = variable_get('webauth_path', conf_path() . '/webauth') . '/login';

  $items[$path] = array(
    'page callback' => 'webauth_return',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
*/

  $items['slac_webauth/403'] = array(
    'page callback' => 'slac_webauth_error_page',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );

  $items['admin/config/webauth'] = array(
    'title' => 'WebAuth',
    'type' => MENU_NORMAL_ITEM,
    'description' => 'Authenticate through SLAC WebAuth',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('slac_webauth_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'file' => 'slac_webauth.admin.inc',
  );

  $items['admin/config/slac_webauth/settings'] = array(
    'title' => 'SLAC WebAuth Settings',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  return $items;
}

/**
 * Handle 403 errors by redirecting users to webauth for login.
 *
 * If, however, they are already logged in and don't have access
 * (for instance, a normal user requesting /admin), then display
 * a normal error message.
 */
function slac_webauth_error_page() {
  global $user;
/*   global $_webauth_session, $user; */
/*
  if (!$_webauth_session) {
    $_webauth_session = new WebAuthSession();
  }
*/
  // If logged in.
  if ($user->uid) {
    // Get restrict message
    $webauth_restrict_message = filter_xss_admin(t(variable_get('webauth_restrict_message',
      'This content has been restricted by the author or by the site administrator.')));
    // If a custom message exists, create 403, and print message.
    if ($webauth_restrict_message) {
      drupal_add_http_header('Status', '403 Forbidden');
      drupal_set_title(t('Access denied'));
      return $webauth_restrict_message;
    }
    // If a message doesn't exist display default access denied page
    else {
      return MENU_ACCESS_DENIED;
    }
  }
  // If not logged in
  else {
    // Redirect to login
    // $_webauth_session->getWeblogin();
  }
}


/**
 * Implements hook_block_info().
 */

function slac_webauth_block_info() {
  $blocks['slac_webauth_login_block'] = array(
    'info'       => t('WebAuth Authentication'),
    'status'     => 1,
    'visibility' => BLOCK_VISIBILITY_NOTLISTED,
	'pages'      => "user\nuser/*",
    'weight'     => 0,
    'region'     => 'sidebar_first'
  );
  return $blocks;
}


/**
 * Implements hook_block_configure().
 */

function slac_webauth_block_configure($delta = '') {
  $form = array();
  switch ($delta) {
    case 'webauth_login_block':
      $form['slac_webauth_link_text'] = array(
      '#type'          => 'textfield',
      '#title'         => t('Text of the WebAuth login link'),
      '#require'       => TRUE,
      '#size'          => 60,
      '#description'   => t('Here you can replace the text of the WebAuth link.'),
      '#default_value' => variable_get('slac_webauth_link_text', 'Log in with WebAuth'),
    );
  }
  return $form;
}

/**
 * Implements hook_block_save().
 */

function webauth_block_save($delta = '', $edit = array()) {
  switch ($delta) {
    case 'webauth_login_block':
      variable_set('slac_webauth_link_text', filter_xss($edit['slac_webauth_link_text']));
  }
}

/**
 * Implements hook_block_view().
 */
function slac_webauth_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'slac_webauth_login_block':
	  // only show block for anonymous users
	  if (user_is_logged_in()) { return $block; }
      $block = array(
        'subject' => t('SLAC WebAuth Login'),
        'content' => _webauth_login_url_html(),
      );
      break;
  }
  return $block;
}


/**
 * Implements hook_block_view_alter().
 */
function slac_webauth_block_view_user_login_alter(&$data, $block) {
  $allow_local = variable_get('slac_webauth_allow_local', TRUE);
  if (!$allow_local) {
    unset($data['content']);
  }
  else {
    $data['subject'] = t('Local User Login');
  }
}


/**
 * Generate the login block content
 */

function _webauth_login_url_html() {
  global $user, $base_url;
  // global $user, $base_url, $_webauth_session;
  // Create a webauth session if needed and not already created.
/*
  if (!$_webauth_session) {
    $_webauth_session = new WebAuthSession();
  }
*/

//  $webauth_login = $_webauth_session->getLoginUrl();
  // @todo: specify web auth login portal
  $webauth_login = 'http://www.yahoo.com';
  if ($user->uid === 0) {
    return theme('slac_webauth_login_block',array('login_url' => $webauth_login, 'slac_login_text' => variable_get('webauth_link_text', 'Log in with WebAuth')));
  }
  return NULL;
}

/**
 * Function to return from webauth login from.
 *
 * This handles logging a user in and then redirecting them to the page they
 * were previously on.
 */
/*
function webauth_return() {
  global $_webauth_session, $user;
  if (!$_webauth_session) {
    $_webauth_session = new WebAuthSession();
  }

  // If the user has no webauth_at cookie, redirect immediately to log in through WebAuth
  // After they go through there, they'll go through the menu system and come back
  // to this function again
  if (!isset($_COOKIE['webauth_at'])) {
    $_webauth_session->getWeblogin();
  }

  if ($user->uid == 0) {
    if ($_webauth_session->isValidSession()) {
      $form_state = array();
      $form_state['values']['name'] = $_webauth_session->getSessionData('wa_remote_user');
      $form_state['values']['pass'] = 'dummy';
      $form_state['weblogin']['server'] = variable_get('webauth_domain', WEBAUTH_DOMAIN);

      // We check this flag later, when registering new users through WebAuth
	  // We can't use authmap yet at that point since the user has not been added to the table yet
      global $webauth_authenticated;
	  $webauth_authenticated = TRUE;

      drupal_form_submit('user_login', $form_state);
    }
    else {
      session_destroy();
      return $_webauth_session->getWeblogin();
    }
  }

  if (!$_webauth_session->isValidSession()) {
    drupal_set_message(t('Unknown error occurred.'));
  }
  $return = $_webauth_session->getReturnUrl();
  $login = variable_get('webauth_path', conf_path() . '/webauth') . '/login';
  if (substr($return, 0, strlen($login)) == $login) {
    $return = '';
  }
  drupal_goto($return);
}
*/


/**
 * Implements hook_theme().
 */

function slac_webauth_theme($existing, $type, $theme, $path) {
  return array(
/*
    'webauth_htaccess' => array(
      'template' => 'webauth_htaccess',
      'variables' => array(
        'groups'             => NULL,
        'require_valid_user' => NULL,
        'users'              => NULL,
        'privgroups'         => NULL,
        'rewrite_url' => NULL),
    ),
*/
    'slac_webauth_login_block' => array(
      'template' => 'slac_webauth_login_block',
      'variables' => array(
        'login_url'  => NULL,
        'login_text' => NULL,
      ),
    ),
  );
}

// @here
/**
 * Implements hook_form_alter().
 *
 * This ensures that user login elements are webauth-enabled.
 *
 */
function slac_webauth_form_alter(&$form, &$form_state, $form_id) {
  // global $user, $base_url, $_webauth_session;
  global $user, $base_url;
  switch ($form_id) {
    case 'user_profile_form':
      $account = $form['#user'];
      if (!empty($account->roles)) {
        // administrators can potentially be local users
        $account_roles = array_flip($account->roles);
        if (array_key_exists('administrator', $account_roles)) {
          return;
        }
        $form['account']['pass']['#type'] = 'hidden';
        $form['account']['current_pass']['#type'] = 'hidden';
        unset($form['account']['current_pass_required_values']['#value']['mail']);
      }
      break;
    case 'user_login_block':
    case 'user_login':
      $form['name']['#title'] = t('Local Drupal Username');
      $form['pass']['#title'] = t('Local Drupal Password');
      if ($form_id === 'user_login') {
	    // create a WebAuth login link
/*
        if (!$_webauth_session) {
          $_webauth_session = new WebAuthSession();
        }
        $webauth_login = $_webauth_session->getLoginUrl();
*/

    $webauth_login = 'http://www.yahoo.com';

		// create a wrapper for the webauth link so we can de-emphasize the local user login form
	    $form['webauth_login_wrapper']['#title']       = t('WebAuth Login');
	    $form['webauth_login_wrapper']['#type']        = 'fieldset';
	    $form['webauth_login_wrapper']['#collapsible'] = TRUE;
	    $form['webauth_login_wrapper']['#collapsed']   = FALSE;
		$form['webauth_login_wrapper']['webauth_login_link']['#markup'] = theme('webauth_login_block',array('login_url' => $webauth_login, 'login_text' => variable_get('webauth_link_text', 'Log in with WebAuth')));

		// create a wrapper for the form, so we can de-emphasize the local user login form
	    $form['local_login_wrapper']['#title']       = 'Local User Login';
	    $form['local_login_wrapper']['#type']        = 'fieldset';
	    $form['local_login_wrapper']['#collapsible'] = TRUE;
	    $form['local_login_wrapper']['#collapsed']   = TRUE;

		// copy and move the form fields into the wrapper
	    $form['local_login_wrapper']['name'] = $form['name'];
	    $form['local_login_wrapper']['pass'] = $form['pass'];
	    $form['local_login_wrapper']['actions'] = $form['actions'];
	    unset($form['name']);
	    unset($form['pass']);
	    unset($form['actions']);
      }

      // Create a webauth session if needed and not already created.
/*
      if (!$_webauth_session) {
        $_webauth_session = new WebAuthSession();
      }
      if (isset($form_state['weblogin']['server'])) {
        $form['#validate'] = array(
          'user_login_name_validate',
          // webauth_login_validate replaces user_login_authenticate_validate
          'webauth_login_validate',
          'user_login_final_validate',
        );
      }
*/
      // drupal_execute() for user_login comes here, and we can lose our login
      // redirect context, so if we are on the auth path here, we should stop
      // altering at this point.
      //
      // I don't love this fix, but it's necessary given how the $_webauth_session
      // object is constructud at the moment.
/*
      $path = variable_get('webauth_path', conf_path() . '/webauth') . '/login';
      if ($_GET['q'] == $path) {
        return;
      }
*/
      break;
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for system_clean_url_settings()
 */
function slac_webauth_form_system_clean_url_settings_alter(&$form, &$form_state) {
  // When clean URLs settings are updated, recreate the .htaccess file
  // $form['#submit'][] = 'webauth_write_htaccess';
}

function slac_webauth_form_user_pass_alter(&$form, &$form_state) {
  $form['name']['#description'] = t('Note: For local Drupal accounts only. Do not use this form to request a new password for a SLAC account. Use <a href="https://http://www2.slac.stanford.edu/comp/slacwide/account/account.html">SLAC Computer account</a>.');
  $form['#validate'][] = 'webauth_user_pass_validate';
}

function slac_webauth_user_pass_validate (&$form, &$form_state) {
  $name = trim($form_state['values']['name']);

  // Try to load by email.
  $account = user_load_by_mail($name);
  if (!$account) {
    // No success, try to load by name.
    $account = user_load_by_name($name);
  }
  if ($account) {
    // If this is a WebAuth account, we should not let them request a one time login link
  if (db_query("SELECT * FROM {authmap} WHERE uid = :uid and module = :module", array(':uid' => $account->uid, ':module' => 'slac_webauth'))->fetchField()) {
      form_set_error('name', t('%name is an account handled by WebAuth and its password cannot be changed here.<br />If you need to update your password, please use <a href="https://http://www2.slac.stanford.edu/comp/slacwide/account/account.html">SLAC Computer account</a>.', array('%name' => $name)));
    }
  }
}

/**
 * Implements hook_user_login().
 */

function slac_webauth_user_login(&$edit, &$account) {
  // If this is a WebAuth account, check for roles and re-grant new roles.
/*
  if (db_query("SELECT * FROM {authmap} WHERE uid = :uid and module = :module", array(':uid' => $account->uid, ':module' => 'slac_webauth'))->fetchField()) {
    webauth_grant_roles($edit, $account);
  }
*/
}


/**
 * Implements hook_user_insert().
 */

function slac_webauth_user_insert(&$edit, &$account, $category) {







  // global $webauth_authenticated;

  // We only want to run these if the user is self-creating via webauth.
  // Otherwise an admin user will transpose their own values onto any
  // account they manually create.

/*
  if ($webauth_authenticated) {
    global $_webauth_session;
    global $user;

    if (!$_webauth_session) {
      $_webauth_session = new WebAuthSession();
    }

    // Try to set the username to the user's preferred name from LDAP, but
    // first check that no one has that name already (in which case, use the SUNetID)
    $name = $_webauth_session->getSessionData('wa_ldap_displayname');
    if (isset($name) && !empty($name) && db_query("SELECT uid FROM {users} WHERE name = :name", array(':name' => $name))->fetchField()) {
      $name =  $account->name;
    }

    $mail = $_webauth_session->getSessionData('wa_ldap_mail');
    $mail =  isset($mail) ? $mail : $account->name;
    db_update('users')
      ->fields(array(
        'mail' => $mail,
        'name' => $name,
      ))
      ->condition('uid', $account->uid)
      ->execute();
  }
*/
}


/**
 * Implements hook_user_delete().
 */

function slac_webauth_user_delete($account) {
}


/**
 * Implements hook_user_logout().
 */

function slac_webauth_user_logout($account) {
/*
  if (isset($_COOKIE['WMDsecureLogin'])) {
    unset($_COOKIE['WMDsecureLogin']);
    setcookie('WMDsecureLogin', '', REQUEST_TIME - 3600);
  }
  unset($_SESSION['wa_session_data']);
*/
}


/**
 * Function used to sync user local Drupal roles based on their security group in LDAP
 */
function slac_webauth_grant_roles(&$edit, &$account) {

}


/**
 * Perform webauth validation on users who come in via the normal Drupal login
 * form or block.
 */

function slac_webauth_login_validate($form, &$form_state) {
/*
  global $_webauth_session;
  if (!$_webauth_session) {
    $_webauth_session = new WebAuthSession();
  }
  if ($_webauth_session->isValidSession()) {
    $name = $form_state['values']['name'] . '@' . $form_state['weblogin']['server'];
    user_external_login_register($name, 'webauth');
    // Replacement user_login_authenticate_validate() function must set $form_state['uid']
    // for user_login_final_validate() not to set_message an error.
    $account = user_external_load($name);
    $form_state['uid'] = $account->uid;
    user_login_finalize($form_state['values']);
  }
*/
}


/**
 * Function to write out our .htaccess file.
 */

function slac_webauth_write_htaccess() {

/*
  $groups = array();
  $user_list = '';
  $rewrite_url = '';

  // Get all the available groups
  $result = db_query("SELECT DISTINCT(wa_group) AS `group` FROM {webauth_roles} WHERE rid > :rid", array(':rid' => 2));
  while ($group = $result->fetchField()) {
    $groups[] = $group;
  }

  $user_list = array();
  $users = explode("\n", variable_get('webauth_require_users', ''));
  foreach ($users as $u) {
    $u = trim($u);
    if ($u != '') {
      $user_list[] = $u;
    }
  }

  $privgroup_list = array();
  $privgroups = explode("\n", variable_get('webauth_require_privgroups', ''));
  foreach ($privgroups as $p) {
    $p = trim($p);
    if ($p != '') {
      $privgroup_list[] = $p;
    }
  }

  if (!variable_get('clean_url', 0)) {
    $new_path = base_path() . '?q=' . variable_get('webauth_path', conf_path() . '/webauth') . '/login';
    $rewrite_url .= 'RewriteRule login$ ' . $new_path . ' [QSA,L,R=301]';
  }

  // Theme contents of the .htaccess file.
  $htaccess_file = theme('webauth_htaccess', array('groups' => $groups, 'require_valid_user' => variable_get('webauth_require_valid_user', 0), 'users' => $user_list, 'privgroups' => $privgroup_list, 'rewrite_url' => $rewrite_url));

  // Get the path or create it inside the files dir.
  $webauth_path = variable_get('webauth_path', conf_path() . '/webauth');

  // Set .htaccess file location
  $webauth_htaccess = $webauth_path . '/.htaccess';

  // If webauth dir doesn't exist yet, create it.
  if (@is_dir($webauth_path) === FALSE) {
    // Create dir.
    mkdir($webauth_path, 0755);
  }

  // Copy necessary check.php file over.
  $default_check_file = drupal_get_path('module', 'webauth') . '/default/check.php';
  copy($default_check_file, $webauth_path . '/check.php');


  // Save .htaccess file to location.
  $fp = fopen($webauth_htaccess, 'w');
  fwrite($fp, $htaccess_file);
  fclose($fp);
*/
}

/**
 *  Helper function that creates or syncs a user
 *  At this stage we assume they have a valid session and the user has authenticated via webauth
 */
function _slac_webauth_user_sync($wa_username) {
  // 1. look for any existing users by username
  // 1a. if user not found, let's create a normal user
  // 1b. if user found, just return the user
  // 2. We will also sync the user roles in this function
  $loaded_user = user_load_by_name($wa_username);
  if (!empty($loaded_user)) {
    // @todo:sync the user roles
    return $loaded_user->uid;
  }

  // saving a new user
  $mail = $wa_username . '@' . EMAIL_DOMAIN;
  $edit = array(
    'name' => check_plain($wa_username),
    'pass' => user_password(),
    'mail' => $mail,
    'init' => $mail,
    'status' => 1,
    'access' => REQUEST_TIME,
  );

  // @todo:sync the user roles
  $account = user_save(null, $edit);

  // Set the authmap
  user_set_authmaps($account, array('authname_slac_webauth' => $edit['name']));

  return $account->uid;
}