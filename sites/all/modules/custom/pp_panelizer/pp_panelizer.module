<?php

/**
 * Implements hook_field_attach_form().
 *
 * Attach our form to this hook instead of hook_form_alter node because
 * we might extend this to other entities in the future.
 */
function pp_panelizer_form_alter(&$form, &$form_state, $form_id) {
  if (strpos($form_id, '_node_form') === FALSE) {
    return;
  }
  if (isset($form['#node']->nid)) {
    return;
  }

  $entity_type = 'node';
  $entity = $form['#node'];
  $bundle = $form['#node']->type;

  $panelizer_handler = panelizer_entity_plugin_get_handler($entity_type);
  $panelizer_objects = $panelizer_handler->get_default_panelizer_objects($bundle);
  if (empty($panelizer_objects)) {
    return;
  }

  $panelizer = reset($panelizer_objects);

  // From PanlizerEntityDefault::page_layout.
  $display = &$panelizer->display;
  $display->context = $panelizer_handler->get_contexts($panelizer, $entity);

  $form_state += array(
    'entity' => $entity,
    'revision info' => $panelizer_handler->entity_allows_revisions($entity),
    'display' => $display,
    'panelizer' => $panelizer,
    'allowed_layouts' => 'panelizer_' . $entity_type . ':' . $bundle,
  );

  ctools_include('common', 'panelizer');
  ctools_include('display-layout', 'panels');
  $form_layout = panelizer_choose_layout_form($form, $form_state);

  $form['layout'] = array(
      '#type' => 'fieldset',
      '#group' => 'additional_settings',
      '#title' => t('Layout'),
      '#collapsible' => TRUE,
      '#collapsed' => TRUE,
      'layout' => $form_layout['layout'],
  );
}

/**
 * Implements hook_node_submit().
 */
function pp_panelizer_node_submit($node, $form, &$form_state) {
  if (!isset($form_state['values']['layout'])) {
    return;
  }

  // Set layout for the newly created node. This tiggers PanelizerEntityDefault::hook_entity_update().
  $node->panelizer['page_manager']->display->layout = $form_state['values']['layout'];
  $node->panelizer['page_manager']->display_is_modified = TRUE;
  node_save($node);
}
