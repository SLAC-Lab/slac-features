diff --git a/file_entity.pages.inc b/file_entity.pages.inc
index e10cfe6..4c2c95f 100644
--- a/file_entity.pages.inc
+++ b/file_entity.pages.inc
@@ -225,8 +225,10 @@ function file_entity_add_upload_step_fields($form, &$form_state, array $options
     '#weight' => -10,
   );
 
-  // Add fields.
-  field_attach_form('file', $file, $form, $form_state);
+  $form = _file_entity_edit($form, $form_state, $file);
+  unset($form['replace_upload']);
+  unset($form['preview']);
+  unset($form['destination']);
 
   $form['actions'] = array('#type' => 'actions');
   $form['actions']['previous'] = array(
@@ -402,13 +404,7 @@ function file_entity_add_upload_submit($form, &$form_state) {
 
   // We have the filetype, check if we can skip step 4.
   if (($form['#step'] == 3 && $trigger == 'edit-next')) {
-    $file = file_load($form_state['storage']['upload']);
-    $form_state['file'] = $file;
-    if (!field_info_instances('file', $form_state['storage']['type'])) {
-      // This filetype doesn't have fields, save the file.
-      $save = TRUE;
-    }
-    elseif (variable_get('file_entity_file_upload_wizard_skip_fields', FALSE)) {
+    if (variable_get('file_entity_file_upload_wizard_skip_fields', FALSE)) {
       // Save the file with blanks fields.
       $save = TRUE;
     }
@@ -449,6 +445,23 @@ function file_entity_add_upload_submit($form, &$form_state) {
       // the fields are on the last page of the multi step form.
       entity_form_submit_build_entity('file', $file, $form, $form_state);
 
+      // A user might assign the associated user by entering a user name in the file
+      // edit form, which we then need to translate to a user ID.
+      if (isset($file->name)) {
+        // The use of isset() is mandatory in the context of user IDs, because
+        // user ID 0 denotes the anonymous user.
+        if ($user = user_load_by_name($file->name)) {
+          $file->uid = $user->uid;
+        }
+        else {
+          $file->uid = 0; // anonymous user
+        }
+      }
+      elseif ($file->uid) {
+        $user = user_load($file->uid);
+        $file->name = $user->name;
+      }
+
       file_save($file);
       $form_state['file'] = $file;
       drupal_set_message(t('@type %name was uploaded.', array('@type' => file_entity_type_get_name($file), '%name' => $file->filename)));
@@ -608,6 +621,42 @@ function file_entity_edit($form, &$form_state, $file) {
     $form['#attributes']['class'][] = 'file-' . $file->type . '-form';
   }
 
+  $form = _file_entity_edit($form, $form_state, $file);
+
+  // Add the buttons.
+  $form['actions'] = array('#type' => 'actions');
+  $form['actions']['submit'] = array(
+    '#type' => 'submit',
+    '#value' => t('Save'),
+    '#weight' => 5,
+    '#submit' => array('file_entity_edit_submit'),
+  );
+  $form['actions']['delete'] = array(
+    '#type' => 'submit',
+    '#value' => t('Delete'),
+    '#weight' => 10,
+    '#submit' => array('file_entity_edit_delete_submit'),
+    '#access' => file_entity_access('delete', $file),
+  );
+
+  // Build the URL for the cancel button taking into account that there might be
+  // a "destination" that includes query string variables.
+  $parameters = drupal_get_query_parameters();
+  $destination = isset($parameters['destination']) ? $parameters['destination'] : 'file/' . $file->fid;
+  $url = drupal_parse_url($destination);
+
+  $form['actions']['cancel'] = array(
+    '#type' => 'link',
+    '#title' => t('Cancel'),
+    '#href' => $url['path'],
+    '#options' => array('query' => $url['query']),
+    '#weight' => 15,
+  );
+
+  return $form;
+}
+
+function _file_entity_edit($form, &$form_state, $file) {
   // Basic file information.
   // These elements are just values so they are not even sent to the client.
   foreach (array('fid', 'type', 'uid', 'timestamp') as $key) {
@@ -763,6 +812,7 @@ function file_entity_edit($form, &$form_state, $file) {
   return $form;
 }
 
+
 /**
  * Form validation handler for file_entity_edit().
  */
